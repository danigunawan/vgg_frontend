# Dockerfile for the VIC application. See http://www.robots.ox.ac.uk/~vgg/software/vic/

# Start from a clean Ubuntu Xenial machine
FROM ubuntu:xenial

# For GPU support, start from an nvidia image
#FROM nvidia/cuda:8.0-devel-ubuntu16.04

# Update repositories and install all apt-get dependencies
RUN apt-get update && apt-get install -y \
    python-pip \
    python3-pip \
    python-dev \
    python3-dev \
    memcached \
    libz-dev \
    libjpeg-dev \
    libfreetype6-dev \
    libevent-dev \
    libzmq-dev \
    screen \
    cmake \
    pkg-config \
    libgoogle-glog-dev \
    libhdf5-serial-dev \
    liblmdb-dev \
    libleveldb-dev \
    libprotobuf-dev \
    protobuf-compiler \
    libopencv-dev \
    libatlas-base-dev \
    libsnappy-dev \
    libgflags-dev \
    libssl-dev \
    libffi-dev \
    unzip \
    wget \
    && apt-get install -y --no-install-recommends libboost-all-dev \
    && rm -rf /var/lib/apt/lists/*

# Change the default shell to be able to work with the virtualenv below
SHELL ["/bin/bash", "-c"]

# Create requirements files for pip, install all pip requirements, create main folders and secret key file
RUN pip install --upgrade pip \
    && pip install virtualenv zipp \
    && mkdir /webapps/ \
    && chmod 777 /webapps/ \
    && mkdir /webapps/visorgen \
    && cd /webapps/visorgen \
    && virtualenv -p python3 . \
    && source ./bin/activate \
    && printf "django==1.10\npython-memcached\nprotobuf==3.0.0\nPillow==6.1.0\ngreenlet==0.4.15\ngevent==1.1.0\nFlask==0.10.1\nvalidictory==0.9.1\nmsgpack-python==0.3.0\nrequests==2.2.1\npyzmq==17.1.2\nWhoosh==2.7.4\nnumpy==1.11.1" > /tmp/requirements.txt \
    && pip install -r /tmp/requirements.txt \
    && printf "simplejson==3.8.2\npyopenssl==17.5.0\npyasn1\nndg-httpsclient" > /tmp/requirements-2.txt \
    && pip install -r /tmp/requirements-2.txt \
    && rm  /tmp/requirements*.txt \
    && mkdir /webapps/visorgen/backend_dependencies  /webapps/visorgen/backend_data \
          /webapps/visorgen/datasets  /webapps/visorgen/datasets/images/  /webapps/visorgen/datasets/images/mydataset \
          /webapps/visorgen/datasets/metadata/  /webapps/visorgen/datasets/metadata/mydataset \
          /webapps/visorgen/datasets/negatives/  /webapps/visorgen/datasets/negatives/mydataset \
          /webapps/visorgen/frontend_data  /webapps/visorgen/frontend_data/searchdata/ /webapps/visorgen/frontend_data/curatedtrainimgs \
          /webapps/visorgen/frontend_data/searchdata/classifiers /webapps/visorgen/frontend_data/searchdata/postrainanno \
          /webapps/visorgen/frontend_data/searchdata/postrainfeats /webapps/visorgen/frontend_data/searchdata/postrainimgs \
          /webapps/visorgen/frontend_data/searchdata/rankinglists /webapps/visorgen/frontend_data/searchdata/predefined_rankinglists \
          /webapps/visorgen/frontend_data/searchdata/uploadedimgs \
    && echo '%45yak9wu56^(@un!b+&022fdr!-1@92_u*gctw*cw4*@hfu5t' > /webapps/visorgen/secret_key_visorgen

# Download caffe, cpp-netlib and liblinear
RUN wget https://github.com/BVLC/caffe/archive/1.0.zip -O /tmp/1.0.zip \
    && unzip /tmp/1.0.zip -d /webapps/visorgen/backend_dependencies/ \
    && mv /webapps/visorgen/backend_dependencies/caffe* /webapps/visorgen/backend_dependencies/caffe \
    && wget https://github.com/kencoken/cpp-netlib/archive/0.11-devel.zip -P /tmp \
    && unzip /tmp/0.11-devel.zip -d /webapps/visorgen/backend_dependencies/ \
    && wget https://github.com/cjlin1/liblinear/archive/v210.zip -P /tmp \
    && unzip /tmp/v210.zip -d /webapps/visorgen/backend_dependencies/ \
    && rm -rf /tmp/*.zip

# Download vgg repos
RUN wget https://gitlab.com/vgg/vgg_frontend/-/archive/master/vgg_frontend-master.zip -O /tmp/vgg_frontend.zip \
    && unzip /tmp/vgg_frontend.zip -d /webapps/visorgen/ \
    && mv /webapps/visorgen/vgg_frontend*  /webapps/visorgen/vgg_frontend \
    && wget https://gitlab.com/vgg/vgg_classifier/-/archive/master/vgg_classifier-master.zip -O /tmp/vgg_classifier.zip \
    && unzip /tmp/vgg_classifier.zip -d /webapps/visorgen/ \
    && mv /webapps/visorgen/vgg_classifier*  /webapps/visorgen/vgg_classifier \
    && rm -rf /tmp/*.zip \
    && cp -f /webapps/visorgen/vgg_frontend/visorgen/settings_cpuvisor-srv.py /webapps/visorgen/vgg_frontend/visorgen/settings.py \
    && cp -f /webapps/visorgen/vgg_frontend/siteroot/static/scripts/add-getting-started-lb-vic.js /webapps/visorgen/vgg_frontend/siteroot/static/scripts/add-getting-started-lb.js \
    && sed -i 's/"\/vgg_frontend"/"\/vic"/g' /webapps/visorgen/vgg_frontend/visorgen/settings.py \
    && sed -i 's/74AFAD/985759/g' /webapps/visorgen/vgg_frontend/siteroot/static/styles/main.css

# Compile caffe. No need to setup pycaffe.
RUN cd /webapps/visorgen/backend_dependencies/caffe/ \
    && cp Makefile.config.example Makefile.config \
    && if [ -f "/usr/local/cuda/bin/nvcc" ]; then echo "Found nvcc, will try to compile Caffe with GPU support"; else sed -i 's/# CPU_ONLY/CPU_ONLY/g' Makefile.config; fi \
    && sed -i 's/INCLUDE_DIRS :=/INCLUDE_DIRS := \/usr\/include\/hdf5\/serial\/ /g' Makefile.config \
    && sed -i 's/LIBRARY_DIRS :=/LIBRARY_DIRS := \/usr\/lib\/x86_64-linux-gnu\/hdf5\/serial\/ /g' Makefile.config \
    && sed -i 's/# Configure build/CXXFLAGS += -std=c++11/g' Makefile \
    && make all

# Compile liblinear
RUN cd /webapps/visorgen/backend_dependencies/liblinear-210/ \
    && make lib \
    && ln -s liblinear.so.3 liblinear.so

# Compile cpp-netlib. Compile and install vgg_classifier. Remove 'build' folder of cpp-netlib to reduce image size.
RUN cd /webapps/visorgen/backend_dependencies/cpp-netlib-0.11-devel/ \
    && mkdir build \
    && cd build \
    && cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=/usr/bin/cc -DCMAKE_CXX_COMPILER=/usr/bin/c++ ../ \
    && make \
    && cd /webapps/visorgen/vgg_classifier \
    && mkdir build \
    && cd build \
    && cmake -DCMAKE_CXX_STANDARD=11 -DCaffe_DIR=/webapps/visorgen/backend_dependencies/caffe/ -DCaffe_INCLUDE_DIR="/webapps/visorgen/backend_dependencies/caffe/include;/webapps/visorgen/backend_dependencies/caffe/build/src" -DLiblinear_DIR=/webapps/visorgen/backend_dependencies/liblinear-210/ -Dcppnetlib_DIR=/webapps/visorgen/backend_dependencies/cpp-netlib-0.11-devel/build/ ../ \
    && make \
    && make install \
    && rm -rf /webapps/visorgen/backend_dependencies/cpp-netlib-0.11-devel/build \
    && sed -i 's|<full_path_to_this_directory>|/webapps/visorgen/vgg_classifier|g' /webapps/visorgen/vgg_classifier/config.prototxt \
    && sed -i 's|<full_path_to_base_folder_where_images_in_dsetpaths_sample.txt_are_located>|/webapps/visorgen/datasets/images/mydataset|g' /webapps/visorgen/vgg_classifier/config.prototxt \
    && sed -i 's|<full_path_to_base_folder_where_images_in_negpaths_sample.txt_are_located>|/webapps/visorgen/datasets/negatives/mydataset|g' /webapps/visorgen/vgg_classifier/config.prototxt \
    && sed -i 's|<full_path_to_dsetfeats_binaryproto_file_produced_by_cpuvisor_preproc>|/webapps/visorgen/backend_data/cpuvisor-srv/dsetfeats.binaryproto|g' /webapps/visorgen/vgg_classifier/config.prototxt \
    && sed -i 's|<full_path_to_negpaths_binaryproto_file_produced_by_cpuvisor_preproc>|/webapps/visorgen/backend_data/cpuvisor-srv/negfeats.binaryproto|g' /webapps/visorgen/vgg_classifier/config.prototxt \
    && sed -i 's|/webapps/visorgen/vgg_classifier/dsetpaths_sample.txt|/webapps/visorgen/backend_data/cpuvisor-srv/dsetpaths.txt|g' /webapps/visorgen/vgg_classifier/config.prototxt \
    && sed -i 's|/webapps/visorgen/vgg_classifier/negpaths_sample.txt|/webapps/visorgen/backend_data/cpuvisor-srv/negpaths.txt|g' /webapps/visorgen/vgg_classifier/config.prototxt

# configure default user in frontend
RUN source /webapps/visorgen/bin/activate \
    && cd /webapps/visorgen/vgg_frontend/ \
    && python manage.py migrate \
    && printf "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ['DJANGO_SETTINGS_MODULE']='visorgen.settings'\napplication = get_wsgi_application()\nfrom django.contrib.auth.models import User\nuser=User.objects.create_user('admin', password='vggadmin')\nuser.is_superuser=True\nuser.is_staff=True\nuser.save()" > super.py \
    && python super.py \
    && rm -f super.py \
    && echo 'tail -f /dev/null' >> /webapps/visorgen/vgg_frontend/scripts/start_all_django.sh

# The customizations below can be done via the command line and are not needed here.
# If you need them create a new Docker image derived from this one and define them.
#EXPOSE 8000
#VOLUME /webapps/visorgen/backend_data \
#       /webapps/visorgen/frontend_data \
#       /webapps/visorgen/datasets/images/mydataset \
#       /webapps/visorgen/datasets/negatives/mydataset \
#       /webapps/visorgen/datasets/metadata/mydataset
#ENTRYPOINT /webapps/visorgen/vgg_frontend/scripts/start_all_django.sh category
